

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置数据源 ，dbcp -->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
<!--属性类型是字符串，通过别名的方式配置扩展插件，
常用的插件有：
监控统计用的filter:stat
日志用的filter:log4j
防御sql注入的filter:wall -->
		<property name="filters" value="log4j"/>
		<!--最大连接池数量-->
		<property name="maxActive" value="20"/>
		<!--	初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
		<property name="initialSize" value="1"/>
		<!--获取连接时最大等待时间，单位毫秒。配置了maxWait之后，
缺省启用公平锁，并发效率会有所下降，
如果需要可以通过配置useUnfairLock属性为true使用非公平锁。-->
		<property name="maxWait" value="60000"/>
		<!--已经不再使用，配置了也没效果-->
		<property name="minIdle" value="1"/>
		<!--有两个含义：
1) Destroy线程会检测连接的间隔时间
2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明-->
		<property name="timeBetweenEvictionRunsMillis" value="3000"/>
		<!-- 未查到-->
		<property name="minEvictableIdleTimeMillis" value="300000"/>
		<!--用来检测连接是否有效的sql，要求是一个查询语句。
如果validationQuery为null，testOnBorrow、testOnReturn、
testWhileIdle都不会其作用。-->
		<property name="validationQuery" value="SELECT 'x'"/>
		<!--建议配置为true，不影响性能，并且保证安全性。
申请连接的时候检测，如果空闲时间大于
timeBetweenEvictionRunsMillis，
执行validationQuery检测连接是否有效。-->
		<property name="testWhileIdle" value="true"/>
		<!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
		<property name="testOnBorrow" value="false"/>
		<!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
		<property name="testOnReturn" value="false"/>
		<!--是否缓存preparedStatement，也就是PSCache。
PSCache对支持游标的数据库性能提升巨大，比如说oracle。
在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，
该应该是支持PSCache。-->
		<property name="poolPreparedStatements" value="true"/>
		<!--未查到-->
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
		<!--编码 -->
		<property name="connectionInitSqls" value="set names utf8mb4;"/>
	</bean>
	
	<!-- sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />



	</bean>
	
	<!-- mapper扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 -->
		<property name="basePackage" value="com.od.ssm.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>





</beans>

